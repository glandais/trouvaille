#!/bin/bash

# Script to commit staged changes with semantic commit message generated by Claude
# Usage: ./commit.sh

set -e

# Check if there are staged changes
if ! git diff --cached --quiet; then
    echo "Staged changes detected. Generating commit message..."
    
    # Get staged changes details
    STAGED_FILES=$(git diff --cached --name-only)
    STAGED_STAT=$(git diff --cached --stat)
    STAGED_DIFF=$(git diff --cached)
    
    echo "Staged files:"
    echo "$STAGED_FILES"
    echo ""
    echo "Changes summary:"
    echo "$STAGED_STAT"
    echo ""
    
    # Generate commit message using Claude
    echo "Generating semantic commit message with Claude..."
    
    # Create temporary file with prompt
    TEMP_PROMPT=$(mktemp)
    cat > "$TEMP_PROMPT" << EOF
Based on these staged git changes, generate a semantic commit message following conventional commits format.

Staged files:
$STAGED_FILES

Changes summary:
$STAGED_STAT

Full diff:
$STAGED_DIFF

Rules:
- Use format: type(scope): subject
- Types: feat, fix, docs, style, refactor, test, chore, ci, build
- Subject: imperative mood, under 50 characters, lowercase, no period
- Then add a blank line and a detailed description (2-3 sentences max)
- Be specific about what was changed and why
- Focus on the 'what' and 'why', not the 'how'

Format:
type(scope): subject

Description explaining what was changed and why.
Additional context if needed.

Return the complete commit message with subject and description.
EOF
    
    # Generate commit message
    COMMIT_MSG=$(claude < "$TEMP_PROMPT")
    
    # Clean up temporary file
    rm -f "$TEMP_PROMPT"
    
    if [ -z "$COMMIT_MSG" ]; then
        echo "Error: Could not generate commit message"
        exit 1
    fi
    
    echo "Generated commit message:"
    echo "  $COMMIT_MSG"
    echo ""
    
    # Confirm with user
    read -p "Use this commit message? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 0
    fi
    
    # Commit with generated message
    git commit -m "$COMMIT_MSG"
    echo "âœ“ Committed successfully!"
    
else
    echo "No staged changes found. Stage some files first with 'git add'."
    exit 1
fi