name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: trouvaille-front/package-lock.json
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Run CI build script
      run: ./ci-build.sh
      
    - name: Build and push Docker images
      run: |
        TAG=${{ steps.version.outputs.version }}
        ./build.sh ${TAG} jvm
        
        # Tag images for GitHub Container Registry
        docker tag trouvaille/backend:${TAG} ghcr.io/${{ github.repository_owner }}/trouvaille-backend:${TAG}
        docker tag trouvaille/frontend:${TAG} ghcr.io/${{ github.repository_owner }}/trouvaille-frontend:${TAG}
        docker tag trouvaille/backend:${TAG} ghcr.io/${{ github.repository_owner }}/trouvaille-backend:latest
        docker tag trouvaille/frontend:${TAG} ghcr.io/${{ github.repository_owner }}/trouvaille-frontend:latest
        
        # Push images
        docker push ghcr.io/${{ github.repository_owner }}/trouvaille-backend:${TAG}
        docker push ghcr.io/${{ github.repository_owner }}/trouvaille-frontend:${TAG}
        docker push ghcr.io/${{ github.repository_owner }}/trouvaille-backend:latest
        docker push ghcr.io/${{ github.repository_owner }}/trouvaille-frontend:latest
        
    - name: Create release archives
      run: |
        TAG=${{ steps.version.outputs.version }}
        
        # Create backend archive
        cd trouvaille-back
        tar -czf ../trouvaille-backend-${TAG}.tar.gz target/*.jar
        cd ..
        
        # Create frontend archive
        cd trouvaille-front
        tar -czf ../trouvaille-frontend-${TAG}.tar.gz dist/
        cd ..
        
        # Create source archive
        git archive --format=tar.gz --prefix=trouvaille-${TAG}/ HEAD > trouvaille-source-${TAG}.tar.gz
        
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \['"${{ steps.version.outputs.version }}"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        else
          echo "Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "This release includes the latest features and bug fixes." >> release_notes.md
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        files: |
          trouvaille-backend-${{ steps.version.outputs.version }}.tar.gz
          trouvaille-frontend-${{ steps.version.outputs.version }}.tar.gz
          trouvaille-source-${{ steps.version.outputs.version }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}