openapi: 3.0.3
info:
  title: API Petites Annonces
  description: API pour une plateforme privée de petites annonces permettant la vente, location et demandes d'objets
  version: 1.0.0

paths:
  /api/v1/annonces/search/list:
    post:
      summary: Récupérer toutes les annonces
      description: Liste paginée des annonces avec filtres et tri possibles
      tags:
        - Annonces
      operationId: listAnnonces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnonceSearch'
      responses:
        '200':
          description: Liste des annonces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annonces'

  /api/v1/annonces/search/count:
    post:
      summary: Récupérer le nombre d'annonces
      tags:
        - Annonces
      operationId: countAnnonces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnonceSearch'
      responses:
        '200':
          description: Nombre
          content:
            application/json:
              schema:
                type: integer

  /api/v1/annonces:
    post:
      summary: Créer une nouvelle annonce
      description: Création d'une annonce
      operationId: createAnnonce
      tags:
        - Annonces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnonceBase'
      responses:
        '201':
          description: Annonce créée avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annonce'

  /api/v1/annonces/{id}:
    get:
      summary: Récupérer une annonce par son ID
      operationId: getAnnonce
      tags:
        - Annonces
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Détails de l'annonce
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annonce'

    put:
      summary: Mettre à jour une annonce
      operationId: putAnnonce
      tags:
        - Annonces
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnonceWithStatut'
      responses:
        '200':
          description: Annonce mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annonce'

    delete:
      summary: Supprimer une annonce
      operationId: deleteAnnonce
      tags:
        - Annonces
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Annonce supprimée

  /api/v1/annonces/photos:
    post:
      summary: Ajouter une photo
      operationId: createPhoto
      tags:
        - Photos
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Photos ajoutées
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'

  /api/v1/annonces/photos/{photoId}:
    delete:
      summary: Supprimer une photo
      operationId: deletePhoto
      tags:
        - Photos
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Photo supprimée

  /api/v1/photos/{photoId}/full:
    get:
      summary: Récupérer le contenu d'une photo en taille réelle
      operationId: getPhotoFull
      tags:
        - Photos
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contenu de la photo en taille réelle
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

  /api/v1/photos/{photoId}/thumb:
    get:
      summary: Récupérer le contenu d'une photo en miniature
      operationId: getPhotoThumb
      tags:
        - Photos
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contenu de la photo en miniature
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

  /api/v1/auth/token:
    post:
      summary: Échanger le code OAuth pour un token
      operationId: exchangeOAuthToken
      tags:
        - Authentification
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthTokenRequest'
      responses:
        '200':
          description: Token échangé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthTokenResponse'

  /api/v1/config:
    get:
      summary: Récupérer la configuration
      operationId: getConfig
      tags:
        - Config
      responses:
        '200':
          description: Détails de l'annonce
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FrontConfiguration'

components:
  schemas:
    FrontConfiguration:
      type: object
      properties:
        authorizeUri:
          type: string
        clientId:
          type: string
      required:
        - authorizeUri
        - clientId

    Utilisateur:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        nickname:
          type: string
      required:
        - id

    AnnonceType:
      type: string
      enum:
        - vente
        - location
      description: Type de transaction

    AnnonceNature:
      type: string
      enum:
        - offre
        - demande
      description: Nature de l'annonce

    PeriodeLocation:
      type: string
      enum:
        - jour
        - semaine
        - mois
      description: Période de location

    Coordinates:
      type: object
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 48.8566
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 2.3522
      required:
        - latitude
        - longitude

    AnnonceSearch:
      type: object
      properties:
        type:
          description: Type d'annonce
          $ref: '#/components/schemas/AnnonceType'
        statut:
          description: Statut de l'annonce
          $ref: '#/components/schemas/AnnonceStatut'
        nature:
          description: Nature de l'annonce
          $ref: '#/components/schemas/AnnonceNature'
        page:
          description: Numéro de page
          type: integer
          minimum: 1
          default: 1
        limit:
          description: Nombre d'éléments par page
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        search:
          description: Recherche textuelle dans titre et description
          type: string
        user_id:
          description: Recherche par utilisateur
          type: string
        prix_min:
          description: Prix minimum
          type: number
          format: double
          minimum: 0
        prix_max:
          description: Prix maximum
          type: number
          format: double
          minimum: 0
        latitude:
          description: Latitude pour le tri par distance
          type: number
          format: double
          minimum: -90
          maximum: 90
        longitude:
          description: Longitude pour le tri par distance
          type: number
          format: double
          minimum: -180
          maximum: 180
        distance_max:
          description: Distance maximale en kilomètres (nécessite lat/lon)
          type: number
          format: double
          minimum: 0
          maximum: 1000
        sort_by:
          description: Champ de tri
          $ref: "#/components/schemas/AnnonceSearchSortBy"
        sort_order:
          description: Ordre de tri
          $ref: "#/components/schemas/AnnonceSearchSortOrder"

    AnnonceSearchSortBy:
      type: string
      enum:
        - date_creation
        - date_modification
        - prix
        - titre
        - distance

    AnnonceSearchSortOrder:
      type: string
      enum:
        - asc
        - desc

    Photo:
      type: object
      properties:
        id:
          type: string
        thumbUrl:
          type: string
        fullUrl:
          type: string
        width:
          type: integer
        height:
          type: integer
      required:
        - id
        - thumbUrl
        - fullUrl
        - width
        - height

    AnnonceBase:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/AnnonceType'
        nature:
          $ref: '#/components/schemas/AnnonceNature'
        titre:
          type: string
          minLength: 5
          maxLength: 100
          example: "Vélo de course en excellent état"
        description:
          type: string
          format: markdown
          maxLength: 2000
          example: "Vélo de course **Trek** en parfait état, utilisé seulement 2 fois. Idéal pour débutant."
        prix:
          $ref: '#/components/schemas/Prix'
        periode_location:
          $ref: '#/components/schemas/PeriodeLocation'
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
          maxItems: 10
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        ville:
          type: string
      required:
        - type
        - nature
        - titre
        - description
        - prix
        - coordinates
        - photos
        - ville

    Prix:
      type: object
      properties:
        montant:
          type: number
          format: double
          minimum: 0
          example: 350.00
        unite:
          $ref: '#/components/schemas/PrixUnite'
      required:
        - montant
        - unite

    PrixUnite:
      type: string
      enum:
        - euro
        - demi
        - soft

    AnnonceStatut:
      type: string
      enum:
        - active
        - suspendue
        - vendue

    AnnonceWithStatut:
      allOf:
        - $ref: '#/components/schemas/AnnonceBase'
        - type: object
          properties:
            statut:
              $ref: '#/components/schemas/AnnonceStatut'
          required:
            - statut

    Annonce:
      allOf:
        - $ref: '#/components/schemas/AnnonceBase'
        - type: object
          properties:
            id:
              type: string
            statut:
              $ref: '#/components/schemas/AnnonceStatut'
            utilisateur:
              $ref: '#/components/schemas/Utilisateur'
            date_creation:
              type: string
              format: date-time
            date_modification:
              type: string
              format: date-time
          required:
            - id
            - statut
            - utilisateur
            - date_creation
            - date_modification

    Annonces:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AnnonceList'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination


    AnnonceList:
      allOf:
        - $ref: '#/components/schemas/Annonce'
        - type: object
          properties:
            distance:
              type: number
              format: double
              minimum: 0
              description: Distance en kilomètres

    Pagination:
      type: object
      properties:
        page_courante:
          type: integer
          minimum: 1
        total_pages:
          type: integer
          minimum: 10
        total_elements:
          type: integer
          minimum: 97
        elements_par_page:
          type: integer
          minimum: 10
      required:
        - page_courante
        - total_pages
        - total_elements
        - elements_par_page

    OAuthTokenRequest:
      type: object
      properties:
        code:
          type: string
          description: Code d'autorisation OAuth
        state:
          type: string
          description: Paramètre state OAuth
        redirectUri:
          type: string
          description: URI de redirection
      required:
        - code
        - state
        - redirectUri

    OAuthTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token d'accès JWT
      required:
        - access_token

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []