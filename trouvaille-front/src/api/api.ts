/* tslint:disable */
/* eslint-disable */
/**
 * API Petites Annonces
 * API pour une plateforme privée de petites annonces permettant la vente, location et demandes d\'objets
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base'

/**
 *
 * @export
 * @interface Annonce
 */
export interface Annonce {
  /**
   *
   * @type {AnnonceType}
   * @memberof Annonce
   */
  type: AnnonceType
  /**
   *
   * @type {AnnonceNature}
   * @memberof Annonce
   */
  nature: AnnonceNature
  /**
   *
   * @type {string}
   * @memberof Annonce
   */
  titre: string
  /**
   *
   * @type {string}
   * @memberof Annonce
   */
  description: string
  /**
   *
   * @type {Prix}
   * @memberof Annonce
   */
  prix: Prix
  /**
   *
   * @type {PeriodeLocation}
   * @memberof Annonce
   */
  periode_location?: PeriodeLocation
  /**
   *
   * @type {Array<Photo>}
   * @memberof Annonce
   */
  photos: Array<Photo>
  /**
   *
   * @type {Coordinates}
   * @memberof Annonce
   */
  coordinates: Coordinates
  /**
   *
   * @type {string}
   * @memberof Annonce
   */
  ville: string
  /**
   *
   * @type {string}
   * @memberof Annonce
   */
  id: string
  /**
   *
   * @type {AnnonceStatut}
   * @memberof Annonce
   */
  statut: AnnonceStatut
  /**
   *
   * @type {Utilisateur}
   * @memberof Annonce
   */
  utilisateur: Utilisateur
  /**
   *
   * @type {string}
   * @memberof Annonce
   */
  date_creation: string
  /**
   *
   * @type {string}
   * @memberof Annonce
   */
  date_modification: string
}

/**
 *
 * @export
 * @interface AnnonceBase
 */
export interface AnnonceBase {
  /**
   *
   * @type {AnnonceType}
   * @memberof AnnonceBase
   */
  type: AnnonceType
  /**
   *
   * @type {AnnonceNature}
   * @memberof AnnonceBase
   */
  nature: AnnonceNature
  /**
   *
   * @type {string}
   * @memberof AnnonceBase
   */
  titre: string
  /**
   *
   * @type {string}
   * @memberof AnnonceBase
   */
  description: string
  /**
   *
   * @type {Prix}
   * @memberof AnnonceBase
   */
  prix: Prix
  /**
   *
   * @type {PeriodeLocation}
   * @memberof AnnonceBase
   */
  periode_location?: PeriodeLocation
  /**
   *
   * @type {Array<Photo>}
   * @memberof AnnonceBase
   */
  photos: Array<Photo>
  /**
   *
   * @type {Coordinates}
   * @memberof AnnonceBase
   */
  coordinates: Coordinates
  /**
   *
   * @type {string}
   * @memberof AnnonceBase
   */
  ville: string
}

/**
 *
 * @export
 * @interface AnnonceList
 */
export interface AnnonceList {
  /**
   *
   * @type {AnnonceType}
   * @memberof AnnonceList
   */
  type: AnnonceType
  /**
   *
   * @type {AnnonceNature}
   * @memberof AnnonceList
   */
  nature: AnnonceNature
  /**
   *
   * @type {string}
   * @memberof AnnonceList
   */
  titre: string
  /**
   *
   * @type {string}
   * @memberof AnnonceList
   */
  description: string
  /**
   *
   * @type {Prix}
   * @memberof AnnonceList
   */
  prix: Prix
  /**
   *
   * @type {PeriodeLocation}
   * @memberof AnnonceList
   */
  periode_location?: PeriodeLocation
  /**
   *
   * @type {Array<Photo>}
   * @memberof AnnonceList
   */
  photos: Array<Photo>
  /**
   *
   * @type {Coordinates}
   * @memberof AnnonceList
   */
  coordinates: Coordinates
  /**
   *
   * @type {string}
   * @memberof AnnonceList
   */
  ville: string
  /**
   *
   * @type {string}
   * @memberof AnnonceList
   */
  id: string
  /**
   *
   * @type {AnnonceStatut}
   * @memberof AnnonceList
   */
  statut: AnnonceStatut
  /**
   *
   * @type {Utilisateur}
   * @memberof AnnonceList
   */
  utilisateur: Utilisateur
  /**
   *
   * @type {string}
   * @memberof AnnonceList
   */
  date_creation: string
  /**
   *
   * @type {string}
   * @memberof AnnonceList
   */
  date_modification: string
  /**
   * Distance en kilomètres
   * @type {number}
   * @memberof AnnonceList
   */
  distance?: number
}

/**
 * Nature de l\'annonce
 * @export
 * @enum {string}
 */

export enum AnnonceNature {
  Offre = 'offre',
  Demande = 'demande',
}

/**
 *
 * @export
 * @interface AnnonceSearch
 */
export interface AnnonceSearch {
  /**
   *
   * @type {AnnonceType}
   * @memberof AnnonceSearch
   */
  type?: AnnonceType
  /**
   *
   * @type {AnnonceStatut}
   * @memberof AnnonceSearch
   */
  statut?: AnnonceStatut
  /**
   *
   * @type {AnnonceNature}
   * @memberof AnnonceSearch
   */
  nature?: AnnonceNature
  /**
   * Numéro de page
   * @type {number}
   * @memberof AnnonceSearch
   */
  page?: number
  /**
   * Nombre d\'éléments par page
   * @type {number}
   * @memberof AnnonceSearch
   */
  limit?: number
  /**
   * Recherche textuelle dans titre et description
   * @type {string}
   * @memberof AnnonceSearch
   */
  search?: string
  /**
   * Recherche par utilisateur
   * @type {string}
   * @memberof AnnonceSearch
   */
  user_id?: string
  /**
   * Prix minimum
   * @type {number}
   * @memberof AnnonceSearch
   */
  prix_min?: number
  /**
   * Prix maximum
   * @type {number}
   * @memberof AnnonceSearch
   */
  prix_max?: number
  /**
   * Latitude pour le tri par distance
   * @type {number}
   * @memberof AnnonceSearch
   */
  latitude?: number
  /**
   * Longitude pour le tri par distance
   * @type {number}
   * @memberof AnnonceSearch
   */
  longitude?: number
  /**
   * Distance maximale en kilomètres (nécessite lat/lon)
   * @type {number}
   * @memberof AnnonceSearch
   */
  distance_max?: number
  /**
   *
   * @type {AnnonceSearchSortBy}
   * @memberof AnnonceSearch
   */
  sort_by?: AnnonceSearchSortBy
  /**
   *
   * @type {AnnonceSearchSortOrder}
   * @memberof AnnonceSearch
   */
  sort_order?: AnnonceSearchSortOrder
}

/**
 *
 * @export
 * @enum {string}
 */

export enum AnnonceSearchSortBy {
  DateCreation = 'date_creation',
  DateModification = 'date_modification',
  Prix = 'prix',
  Titre = 'titre',
  Distance = 'distance',
}

/**
 *
 * @export
 * @enum {string}
 */

export enum AnnonceSearchSortOrder {
  Asc = 'asc',
  Desc = 'desc',
}

/**
 *
 * @export
 * @enum {string}
 */

export enum AnnonceStatut {
  Active = 'active',
  Suspendue = 'suspendue',
  Vendue = 'vendue',
}

/**
 * Type de transaction
 * @export
 * @enum {string}
 */

export enum AnnonceType {
  Vente = 'vente',
  Location = 'location',
}

/**
 *
 * @export
 * @interface AnnonceWithStatut
 */
export interface AnnonceWithStatut {
  /**
   *
   * @type {AnnonceType}
   * @memberof AnnonceWithStatut
   */
  type: AnnonceType
  /**
   *
   * @type {AnnonceNature}
   * @memberof AnnonceWithStatut
   */
  nature: AnnonceNature
  /**
   *
   * @type {string}
   * @memberof AnnonceWithStatut
   */
  titre: string
  /**
   *
   * @type {string}
   * @memberof AnnonceWithStatut
   */
  description: string
  /**
   *
   * @type {Prix}
   * @memberof AnnonceWithStatut
   */
  prix: Prix
  /**
   *
   * @type {PeriodeLocation}
   * @memberof AnnonceWithStatut
   */
  periode_location?: PeriodeLocation
  /**
   *
   * @type {Array<Photo>}
   * @memberof AnnonceWithStatut
   */
  photos: Array<Photo>
  /**
   *
   * @type {Coordinates}
   * @memberof AnnonceWithStatut
   */
  coordinates: Coordinates
  /**
   *
   * @type {string}
   * @memberof AnnonceWithStatut
   */
  ville: string
  /**
   *
   * @type {AnnonceStatut}
   * @memberof AnnonceWithStatut
   */
  statut: AnnonceStatut
}

/**
 *
 * @export
 * @interface Annonces
 */
export interface Annonces {
  /**
   *
   * @type {Array<AnnonceList>}
   * @memberof Annonces
   */
  data: Array<AnnonceList>
  /**
   *
   * @type {Pagination}
   * @memberof Annonces
   */
  pagination: Pagination
}
/**
 *
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
  /**
   *
   * @type {number}
   * @memberof Coordinates
   */
  latitude: number
  /**
   *
   * @type {number}
   * @memberof Coordinates
   */
  longitude: number
}
/**
 *
 * @export
 * @interface FrontConfiguration
 */
export interface FrontConfiguration {
  /**
   *
   * @type {string}
   * @memberof FrontConfiguration
   */
  authorizeUri: string
  /**
   *
   * @type {string}
   * @memberof FrontConfiguration
   */
  clientId: string
}
/**
 *
 * @export
 * @interface OAuthTokenRequest
 */
export interface OAuthTokenRequest {
  /**
   * Code d\'autorisation OAuth
   * @type {string}
   * @memberof OAuthTokenRequest
   */
  code: string
  /**
   * Paramètre state OAuth
   * @type {string}
   * @memberof OAuthTokenRequest
   */
  state: string
  /**
   * URI de redirection
   * @type {string}
   * @memberof OAuthTokenRequest
   */
  redirectUri: string
}
/**
 *
 * @export
 * @interface OAuthTokenResponse
 */
export interface OAuthTokenResponse {
  /**
   * Token d\'accès JWT
   * @type {string}
   * @memberof OAuthTokenResponse
   */
  access_token: string
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  page_courante: number
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  total_pages: number
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  total_elements: number
  /**
   *
   * @type {number}
   * @memberof Pagination
   */
  elements_par_page: number
}
/**
 * Période de location
 * @export
 * @enum {string}
 */

export enum PeriodeLocation {
  Jour = 'jour',
  Semaine = 'semaine',
  Mois = 'mois',
}

/**
 *
 * @export
 * @interface Photo
 */
export interface Photo {
  /**
   *
   * @type {string}
   * @memberof Photo
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof Photo
   */
  thumbUrl: string
  /**
   *
   * @type {string}
   * @memberof Photo
   */
  fullUrl: string
  /**
   *
   * @type {number}
   * @memberof Photo
   */
  width: number
  /**
   *
   * @type {number}
   * @memberof Photo
   */
  height: number
}
/**
 *
 * @export
 * @interface Prix
 */
export interface Prix {
  /**
   *
   * @type {number}
   * @memberof Prix
   */
  montant: number
  /**
   *
   * @type {PrixUnite}
   * @memberof Prix
   */
  unite: PrixUnite
}

/**
 *
 * @export
 * @enum {string}
 */

export enum PrixUnite {
  Euro = 'euro',
  Demi = 'demi',
  Soft = 'soft',
}

/**
 *
 * @export
 * @interface Utilisateur
 */
export interface Utilisateur {
  /**
   *
   * @type {string}
   * @memberof Utilisateur
   */
  id: string
  /**
   *
   * @type {string}
   * @memberof Utilisateur
   */
  username?: string
  /**
   *
   * @type {string}
   * @memberof Utilisateur
   */
  nickname?: string
}

/**
 * AnnoncesApi - axios parameter creator
 * @export
 */
export const AnnoncesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Récupérer le nombre d\'annonces
     * @param {AnnonceSearch} annonceSearch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countAnnonces: async (
      annonceSearch: AnnonceSearch,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'annonceSearch' is not null or undefined
      assertParamExists('countAnnonces', 'annonceSearch', annonceSearch)
      const localVarPath = `/api/v1/annonces/search/count`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        annonceSearch,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Création d\'une annonce
     * @summary Créer une nouvelle annonce
     * @param {AnnonceBase} annonceBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAnnonce: async (
      annonceBase: AnnonceBase,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'annonceBase' is not null or undefined
      assertParamExists('createAnnonce', 'annonceBase', annonceBase)
      const localVarPath = `/api/v1/annonces`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        annonceBase,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Supprimer une annonce
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAnnonce: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteAnnonce', 'id', id)
      const localVarPath = `/api/v1/annonces/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Récupérer une annonce par son ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnnonce: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getAnnonce', 'id', id)
      const localVarPath = `/api/v1/annonces/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Liste paginée des annonces avec filtres et tri possibles
     * @summary Récupérer toutes les annonces
     * @param {AnnonceSearch} annonceSearch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAnnonces: async (
      annonceSearch: AnnonceSearch,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'annonceSearch' is not null or undefined
      assertParamExists('listAnnonces', 'annonceSearch', annonceSearch)
      const localVarPath = `/api/v1/annonces/search/list`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        annonceSearch,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Mettre à jour une annonce
     * @param {string} id
     * @param {AnnonceWithStatut} annonceWithStatut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAnnonce: async (
      id: string,
      annonceWithStatut: AnnonceWithStatut,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putAnnonce', 'id', id)
      // verify required parameter 'annonceWithStatut' is not null or undefined
      assertParamExists('putAnnonce', 'annonceWithStatut', annonceWithStatut)
      const localVarPath = `/api/v1/annonces/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        annonceWithStatut,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AnnoncesApi - functional programming interface
 * @export
 */
export const AnnoncesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AnnoncesApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Récupérer le nombre d\'annonces
     * @param {AnnonceSearch} annonceSearch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async countAnnonces(
      annonceSearch: AnnonceSearch,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.countAnnonces(
        annonceSearch,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AnnoncesApi.countAnnonces']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Création d\'une annonce
     * @summary Créer une nouvelle annonce
     * @param {AnnonceBase} annonceBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAnnonce(
      annonceBase: AnnonceBase,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonce>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnonce(annonceBase, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AnnoncesApi.createAnnonce']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Supprimer une annonce
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAnnonce(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnnonce(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AnnoncesApi.deleteAnnonce']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Récupérer une annonce par son ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAnnonce(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonce>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnonce(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AnnoncesApi.getAnnonce']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Liste paginée des annonces avec filtres et tri possibles
     * @summary Récupérer toutes les annonces
     * @param {AnnonceSearch} annonceSearch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listAnnonces(
      annonceSearch: AnnonceSearch,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonces>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listAnnonces(annonceSearch, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AnnoncesApi.listAnnonces']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Mettre à jour une annonce
     * @param {string} id
     * @param {AnnonceWithStatut} annonceWithStatut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putAnnonce(
      id: string,
      annonceWithStatut: AnnonceWithStatut,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonce>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putAnnonce(
        id,
        annonceWithStatut,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AnnoncesApi.putAnnonce']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AnnoncesApi - factory interface
 * @export
 */
export const AnnoncesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AnnoncesApiFp(configuration)
  return {
    /**
     *
     * @summary Récupérer le nombre d\'annonces
     * @param {AnnonceSearch} annonceSearch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    countAnnonces(
      annonceSearch: AnnonceSearch,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<number> {
      return localVarFp
        .countAnnonces(annonceSearch, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Création d\'une annonce
     * @summary Créer une nouvelle annonce
     * @param {AnnonceBase} annonceBase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAnnonce(
      annonceBase: AnnonceBase,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Annonce> {
      return localVarFp
        .createAnnonce(annonceBase, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Supprimer une annonce
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAnnonce(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteAnnonce(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Récupérer une annonce par son ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnnonce(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Annonce> {
      return localVarFp.getAnnonce(id, options).then((request) => request(axios, basePath))
    },
    /**
     * Liste paginée des annonces avec filtres et tri possibles
     * @summary Récupérer toutes les annonces
     * @param {AnnonceSearch} annonceSearch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAnnonces(
      annonceSearch: AnnonceSearch,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Annonces> {
      return localVarFp
        .listAnnonces(annonceSearch, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Mettre à jour une annonce
     * @param {string} id
     * @param {AnnonceWithStatut} annonceWithStatut
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAnnonce(
      id: string,
      annonceWithStatut: AnnonceWithStatut,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Annonce> {
      return localVarFp
        .putAnnonce(id, annonceWithStatut, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AnnoncesApi - object-oriented interface
 * @export
 * @class AnnoncesApi
 * @extends {BaseAPI}
 */
export class AnnoncesApi extends BaseAPI {
  /**
   *
   * @summary Récupérer le nombre d\'annonces
   * @param {AnnonceSearch} annonceSearch
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnoncesApi
   */
  public countAnnonces(annonceSearch: AnnonceSearch, options?: RawAxiosRequestConfig) {
    return AnnoncesApiFp(this.configuration)
      .countAnnonces(annonceSearch, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Création d\'une annonce
   * @summary Créer une nouvelle annonce
   * @param {AnnonceBase} annonceBase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnoncesApi
   */
  public createAnnonce(annonceBase: AnnonceBase, options?: RawAxiosRequestConfig) {
    return AnnoncesApiFp(this.configuration)
      .createAnnonce(annonceBase, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Supprimer une annonce
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnoncesApi
   */
  public deleteAnnonce(id: string, options?: RawAxiosRequestConfig) {
    return AnnoncesApiFp(this.configuration)
      .deleteAnnonce(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Récupérer une annonce par son ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnoncesApi
   */
  public getAnnonce(id: string, options?: RawAxiosRequestConfig) {
    return AnnoncesApiFp(this.configuration)
      .getAnnonce(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Liste paginée des annonces avec filtres et tri possibles
   * @summary Récupérer toutes les annonces
   * @param {AnnonceSearch} annonceSearch
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnoncesApi
   */
  public listAnnonces(annonceSearch: AnnonceSearch, options?: RawAxiosRequestConfig) {
    return AnnoncesApiFp(this.configuration)
      .listAnnonces(annonceSearch, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Mettre à jour une annonce
   * @param {string} id
   * @param {AnnonceWithStatut} annonceWithStatut
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnoncesApi
   */
  public putAnnonce(
    id: string,
    annonceWithStatut: AnnonceWithStatut,
    options?: RawAxiosRequestConfig,
  ) {
    return AnnoncesApiFp(this.configuration)
      .putAnnonce(id, annonceWithStatut, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AuthentificationApi - axios parameter creator
 * @export
 */
export const AuthentificationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Échanger le code OAuth pour un token
     * @param {OAuthTokenRequest} oAuthTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeOAuthToken: async (
      oAuthTokenRequest: OAuthTokenRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'oAuthTokenRequest' is not null or undefined
      assertParamExists('exchangeOAuthToken', 'oAuthTokenRequest', oAuthTokenRequest)
      const localVarPath = `/api/v1/auth/token`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        oAuthTokenRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuthentificationApi - functional programming interface
 * @export
 */
export const AuthentificationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthentificationApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Échanger le code OAuth pour un token
     * @param {OAuthTokenRequest} oAuthTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async exchangeOAuthToken(
      oAuthTokenRequest: OAuthTokenRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthTokenResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeOAuthToken(
        oAuthTokenRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuthentificationApi.exchangeOAuthToken']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AuthentificationApi - factory interface
 * @export
 */
export const AuthentificationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthentificationApiFp(configuration)
  return {
    /**
     *
     * @summary Échanger le code OAuth pour un token
     * @param {OAuthTokenRequest} oAuthTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exchangeOAuthToken(
      oAuthTokenRequest: OAuthTokenRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OAuthTokenResponse> {
      return localVarFp
        .exchangeOAuthToken(oAuthTokenRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuthentificationApi - object-oriented interface
 * @export
 * @class AuthentificationApi
 * @extends {BaseAPI}
 */
export class AuthentificationApi extends BaseAPI {
  /**
   *
   * @summary Échanger le code OAuth pour un token
   * @param {OAuthTokenRequest} oAuthTokenRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthentificationApi
   */
  public exchangeOAuthToken(oAuthTokenRequest: OAuthTokenRequest, options?: RawAxiosRequestConfig) {
    return AuthentificationApiFp(this.configuration)
      .exchangeOAuthToken(oAuthTokenRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Récupérer la configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfig: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Récupérer la configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConfig(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrontConfiguration>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ConfigApi.getConfig']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ConfigApiFp(configuration)
  return {
    /**
     *
     * @summary Récupérer la configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfig(options?: RawAxiosRequestConfig): AxiosPromise<FrontConfiguration> {
      return localVarFp.getConfig(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
  /**
   *
   * @summary Récupérer la configuration
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConfigApi
   */
  public getConfig(options?: RawAxiosRequestConfig) {
    return ConfigApiFp(this.configuration)
      .getConfig(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PhotosApi - axios parameter creator
 * @export
 */
export const PhotosApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Ajouter une photo
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPhoto: async (body: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('createPhoto', 'body', body)
      const localVarPath = `/api/v1/annonces/photos`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter['Content-Type'] = 'application/octet-stream'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Supprimer une photo
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePhoto: async (
      photoId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photoId' is not null or undefined
      assertParamExists('deletePhoto', 'photoId', photoId)
      const localVarPath = `/api/v1/annonces/photos/{photoId}`.replace(
        `{${'photoId'}}`,
        encodeURIComponent(String(photoId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Récupérer le contenu d\'une photo en taille réelle
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhotoFull: async (
      photoId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photoId' is not null or undefined
      assertParamExists('getPhotoFull', 'photoId', photoId)
      const localVarPath = `/api/v1/photos/{photoId}/full`.replace(
        `{${'photoId'}}`,
        encodeURIComponent(String(photoId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Récupérer le contenu d\'une photo en miniature
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhotoThumb: async (
      photoId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'photoId' is not null or undefined
      assertParamExists('getPhotoThumb', 'photoId', photoId)
      const localVarPath = `/api/v1/photos/{photoId}/thumb`.replace(
        `{${'photoId'}}`,
        encodeURIComponent(String(photoId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PhotosApi - functional programming interface
 * @export
 */
export const PhotosApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PhotosApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Ajouter une photo
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPhoto(
      body: File,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Photo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoto(body, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PhotosApi.createPhoto']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Supprimer une photo
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePhoto(
      photoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePhoto(photoId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PhotosApi.deletePhoto']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Récupérer le contenu d\'une photo en taille réelle
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPhotoFull(
      photoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPhotoFull(photoId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PhotosApi.getPhotoFull']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Récupérer le contenu d\'une photo en miniature
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPhotoThumb(
      photoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPhotoThumb(photoId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['PhotosApi.getPhotoThumb']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * PhotosApi - factory interface
 * @export
 */
export const PhotosApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PhotosApiFp(configuration)
  return {
    /**
     *
     * @summary Ajouter une photo
     * @param {File} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPhoto(body: File, options?: RawAxiosRequestConfig): AxiosPromise<Photo> {
      return localVarFp.createPhoto(body, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Supprimer une photo
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePhoto(photoId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deletePhoto(photoId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Récupérer le contenu d\'une photo en taille réelle
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhotoFull(photoId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
      return localVarFp.getPhotoFull(photoId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Récupérer le contenu d\'une photo en miniature
     * @param {string} photoId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhotoThumb(photoId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
      return localVarFp.getPhotoThumb(photoId, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * PhotosApi - object-oriented interface
 * @export
 * @class PhotosApi
 * @extends {BaseAPI}
 */
export class PhotosApi extends BaseAPI {
  /**
   *
   * @summary Ajouter une photo
   * @param {File} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhotosApi
   */
  public createPhoto(body: File, options?: RawAxiosRequestConfig) {
    return PhotosApiFp(this.configuration)
      .createPhoto(body, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Supprimer une photo
   * @param {string} photoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhotosApi
   */
  public deletePhoto(photoId: string, options?: RawAxiosRequestConfig) {
    return PhotosApiFp(this.configuration)
      .deletePhoto(photoId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Récupérer le contenu d\'une photo en taille réelle
   * @param {string} photoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhotosApi
   */
  public getPhotoFull(photoId: string, options?: RawAxiosRequestConfig) {
    return PhotosApiFp(this.configuration)
      .getPhotoFull(photoId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Récupérer le contenu d\'une photo en miniature
   * @param {string} photoId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PhotosApi
   */
  public getPhotoThumb(photoId: string, options?: RawAxiosRequestConfig) {
    return PhotosApiFp(this.configuration)
      .getPhotoThumb(photoId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
