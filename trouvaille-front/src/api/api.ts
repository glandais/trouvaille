/* tslint:disable */
/* eslint-disable */
/**
 * API Petites Annonces
 * API pour une plateforme privée de petites annonces permettant la vente, location et demandes d\'objets
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Annonce
 */
export interface Annonce {
    /**
     * 
     * @type {AnnonceType}
     * @memberof Annonce
     */
    'type': AnnonceType;
    /**
     * 
     * @type {AnnonceNature}
     * @memberof Annonce
     */
    'nature': AnnonceNature;
    /**
     * 
     * @type {string}
     * @memberof Annonce
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof Annonce
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Annonce
     */
    'prix'?: number;
    /**
     * 
     * @type {PeriodeLocation}
     * @memberof Annonce
     */
    'periode_location'?: PeriodeLocation;
    /**
     * 
     * @type {Coordinates}
     * @memberof Annonce
     */
    'coordinates': Coordinates;
    /**
     * 
     * @type {string}
     * @memberof Annonce
     */
    'id': string;
    /**
     * 
     * @type {Utilisateur}
     * @memberof Annonce
     */
    'utilisateur': Utilisateur;
    /**
     * 
     * @type {Array<string>}
     * @memberof Annonce
     */
    'photos'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Annonce
     */
    'date_creation': string;
    /**
     * 
     * @type {string}
     * @memberof Annonce
     */
    'date_modification'?: string;
    /**
     * 
     * @type {AnnonceStatut}
     * @memberof Annonce
     */
    'statut': AnnonceStatut;
}


/**
 * 
 * @export
 * @interface AnnonceBase
 */
export interface AnnonceBase {
    /**
     * 
     * @type {AnnonceType}
     * @memberof AnnonceBase
     */
    'type': AnnonceType;
    /**
     * 
     * @type {AnnonceNature}
     * @memberof AnnonceBase
     */
    'nature': AnnonceNature;
    /**
     * 
     * @type {string}
     * @memberof AnnonceBase
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof AnnonceBase
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof AnnonceBase
     */
    'prix'?: number;
    /**
     * 
     * @type {PeriodeLocation}
     * @memberof AnnonceBase
     */
    'periode_location'?: PeriodeLocation;
    /**
     * 
     * @type {Coordinates}
     * @memberof AnnonceBase
     */
    'coordinates': Coordinates;
}


/**
 * 
 * @export
 * @interface AnnonceCreate
 */
export interface AnnonceCreate {
    /**
     * 
     * @type {AnnonceType}
     * @memberof AnnonceCreate
     */
    'type': AnnonceType;
    /**
     * 
     * @type {AnnonceNature}
     * @memberof AnnonceCreate
     */
    'nature': AnnonceNature;
    /**
     * 
     * @type {string}
     * @memberof AnnonceCreate
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof AnnonceCreate
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof AnnonceCreate
     */
    'prix'?: number;
    /**
     * 
     * @type {PeriodeLocation}
     * @memberof AnnonceCreate
     */
    'periode_location'?: PeriodeLocation;
    /**
     * 
     * @type {Coordinates}
     * @memberof AnnonceCreate
     */
    'coordinates': Coordinates;
    /**
     * Ids des photos déjà uploadées
     * @type {Array<string>}
     * @memberof AnnonceCreate
     */
    'photos_ids'?: Array<string>;
}


/**
 * 
 * @export
 * @interface AnnonceList
 */
export interface AnnonceList {
    /**
     * 
     * @type {AnnonceType}
     * @memberof AnnonceList
     */
    'type': AnnonceType;
    /**
     * 
     * @type {AnnonceNature}
     * @memberof AnnonceList
     */
    'nature': AnnonceNature;
    /**
     * 
     * @type {string}
     * @memberof AnnonceList
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof AnnonceList
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof AnnonceList
     */
    'prix'?: number;
    /**
     * 
     * @type {PeriodeLocation}
     * @memberof AnnonceList
     */
    'periode_location'?: PeriodeLocation;
    /**
     * 
     * @type {Coordinates}
     * @memberof AnnonceList
     */
    'coordinates': Coordinates;
    /**
     * 
     * @type {string}
     * @memberof AnnonceList
     */
    'id'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnnonceList
     */
    'photos'?: Array<string>;
    /**
     * Distance en kilomètres (présent uniquement si tri par distance)
     * @type {number}
     * @memberof AnnonceList
     */
    'distance'?: number;
}


/**
 * Nature de l\'annonce
 * @export
 * @enum {string}
 */

export enum AnnonceNature {
    Offre = 'offre',
    Demande = 'demande'
}


/**
 * 
 * @export
 * @enum {string}
 */

export enum AnnonceStatut {
    Active = 'active',
    Suspendue = 'suspendue',
    Vendue = 'vendue'
}


/**
 * Type de transaction
 * @export
 * @enum {string}
 */

export enum AnnonceType {
    Vente = 'vente',
    Location = 'location'
}


/**
 * 
 * @export
 * @interface AnnonceUpdate
 */
export interface AnnonceUpdate {
    /**
     * 
     * @type {AnnonceType}
     * @memberof AnnonceUpdate
     */
    'type': AnnonceType;
    /**
     * 
     * @type {AnnonceNature}
     * @memberof AnnonceUpdate
     */
    'nature': AnnonceNature;
    /**
     * 
     * @type {string}
     * @memberof AnnonceUpdate
     */
    'titre': string;
    /**
     * 
     * @type {string}
     * @memberof AnnonceUpdate
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof AnnonceUpdate
     */
    'prix'?: number;
    /**
     * 
     * @type {PeriodeLocation}
     * @memberof AnnonceUpdate
     */
    'periode_location'?: PeriodeLocation;
    /**
     * 
     * @type {Coordinates}
     * @memberof AnnonceUpdate
     */
    'coordinates': Coordinates;
    /**
     * 
     * @type {AnnonceStatut}
     * @memberof AnnonceUpdate
     */
    'statut'?: AnnonceStatut;
    /**
     * Ids des photos déjà uploadées
     * @type {Array<string>}
     * @memberof AnnonceUpdate
     */
    'photos_ids'?: Array<string>;
}


/**
 * 
 * @export
 * @interface Annonces
 */
export interface Annonces {
    /**
     * 
     * @type {Array<AnnonceList>}
     * @memberof Annonces
     */
    'data'?: Array<AnnonceList>;
    /**
     * 
     * @type {Pagination}
     * @memberof Annonces
     */
    'pagination'?: Pagination;
}
/**
 * 
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface ErrorDetailsInner
 */
export interface ErrorDetailsInner {
    /**
     * 
     * @type {string}
     * @memberof ErrorDetailsInner
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDetailsInner
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {Array<ErrorDetailsInner>}
     * @memberof ModelError
     */
    'details'?: Array<ErrorDetailsInner>;
}
/**
 * 
 * @export
 * @interface OAuthTokenRequest
 */
export interface OAuthTokenRequest {
    /**
     * Code d\'autorisation OAuth
     * @type {string}
     * @memberof OAuthTokenRequest
     */
    'code': string;
    /**
     * Paramètre state OAuth
     * @type {string}
     * @memberof OAuthTokenRequest
     */
    'state': string;
    /**
     * URI de redirection
     * @type {string}
     * @memberof OAuthTokenRequest
     */
    'redirectUri': string;
}
/**
 * 
 * @export
 * @interface OAuthTokenResponse
 */
export interface OAuthTokenResponse {
    /**
     * Token d\'accès JWT
     * @type {string}
     * @memberof OAuthTokenResponse
     */
    'access_token': string;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'page_courante': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total_pages': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total_elements': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'elements_par_page': number;
}
/**
 * Période de location
 * @export
 * @enum {string}
 */

export enum PeriodeLocation {
    Jour = 'jour',
    Semaine = 'semaine',
    Mois = 'mois'
}


/**
 * 
 * @export
 * @interface Utilisateur
 */
export interface Utilisateur {
    /**
     * 
     * @type {string}
     * @memberof Utilisateur
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Utilisateur
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof Utilisateur
     */
    'nickname'?: string;
}

/**
 * AnnoncesApi - axios parameter creator
 * @export
 */
export const AnnoncesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Création d\'une annonce
         * @summary Créer une nouvelle annonce
         * @param {AnnonceCreate} annonceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnonce: async (annonceCreate: AnnonceCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annonceCreate' is not null or undefined
            assertParamExists('createAnnonce', 'annonceCreate', annonceCreate)
            const localVarPath = `/api/v1/annonces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annonceCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Supprimer une annonce
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnonce: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAnnonce', 'id', id)
            const localVarPath = `/api/v1/annonces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Récupérer une annonce par son ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnonce: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnnonce', 'id', id)
            const localVarPath = `/api/v1/annonces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Liste paginée des annonces avec filtres et tri possibles
         * @summary Récupérer toutes les annonces
         * @param {AnnonceType} [type] Type d\&#39;annonce
         * @param {AnnonceStatut} [statut] Statut de l\&#39;annonce
         * @param {AnnonceNature} [nature] Nature de l\&#39;annonce
         * @param {number} [page] Numéro de page
         * @param {number} [limit] Nombre d\&#39;éléments par page
         * @param {string} [search] Recherche textuelle dans titre et description
         * @param {string} [userId] Recherche par utilisateur
         * @param {number} [prixMin] Prix minimum
         * @param {number} [prixMax] Prix maximum
         * @param {number} [latitude] Latitude pour le tri par distance
         * @param {number} [longitude] Longitude pour le tri par distance
         * @param {number} [distanceMax] Distance maximale en kilomètres (nécessite lat/lon)
         * @param {ListAnnoncesSortByEnum} [sortBy] Champ de tri
         * @param {ListAnnoncesSortOrderEnum} [sortOrder] Ordre de tri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnonces: async (type?: AnnonceType, statut?: AnnonceStatut, nature?: AnnonceNature, page?: number, limit?: number, search?: string, userId?: string, prixMin?: number, prixMax?: number, latitude?: number, longitude?: number, distanceMax?: number, sortBy?: ListAnnoncesSortByEnum, sortOrder?: ListAnnoncesSortOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/annonces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (statut !== undefined) {
                localVarQueryParameter['statut'] = statut;
            }

            if (nature !== undefined) {
                localVarQueryParameter['nature'] = nature;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (prixMin !== undefined) {
                localVarQueryParameter['prix_min'] = prixMin;
            }

            if (prixMax !== undefined) {
                localVarQueryParameter['prix_max'] = prixMax;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (distanceMax !== undefined) {
                localVarQueryParameter['distance_max'] = distanceMax;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mettre à jour une annonce
         * @param {string} id 
         * @param {AnnonceUpdate} annonceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAnnonce: async (id: string, annonceUpdate: AnnonceUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAnnonce', 'id', id)
            // verify required parameter 'annonceUpdate' is not null or undefined
            assertParamExists('putAnnonce', 'annonceUpdate', annonceUpdate)
            const localVarPath = `/api/v1/annonces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annonceUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnoncesApi - functional programming interface
 * @export
 */
export const AnnoncesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnoncesApiAxiosParamCreator(configuration)
    return {
        /**
         * Création d\'une annonce
         * @summary Créer une nouvelle annonce
         * @param {AnnonceCreate} annonceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnnonce(annonceCreate: AnnonceCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonce>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnnonce(annonceCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnoncesApi.createAnnonce']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Supprimer une annonce
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnnonce(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnnonce(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnoncesApi.deleteAnnonce']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Récupérer une annonce par son ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnnonce(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonce>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnnonce(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnoncesApi.getAnnonce']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Liste paginée des annonces avec filtres et tri possibles
         * @summary Récupérer toutes les annonces
         * @param {AnnonceType} [type] Type d\&#39;annonce
         * @param {AnnonceStatut} [statut] Statut de l\&#39;annonce
         * @param {AnnonceNature} [nature] Nature de l\&#39;annonce
         * @param {number} [page] Numéro de page
         * @param {number} [limit] Nombre d\&#39;éléments par page
         * @param {string} [search] Recherche textuelle dans titre et description
         * @param {string} [userId] Recherche par utilisateur
         * @param {number} [prixMin] Prix minimum
         * @param {number} [prixMax] Prix maximum
         * @param {number} [latitude] Latitude pour le tri par distance
         * @param {number} [longitude] Longitude pour le tri par distance
         * @param {number} [distanceMax] Distance maximale en kilomètres (nécessite lat/lon)
         * @param {ListAnnoncesSortByEnum} [sortBy] Champ de tri
         * @param {ListAnnoncesSortOrderEnum} [sortOrder] Ordre de tri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAnnonces(type?: AnnonceType, statut?: AnnonceStatut, nature?: AnnonceNature, page?: number, limit?: number, search?: string, userId?: string, prixMin?: number, prixMax?: number, latitude?: number, longitude?: number, distanceMax?: number, sortBy?: ListAnnoncesSortByEnum, sortOrder?: ListAnnoncesSortOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonces>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAnnonces(type, statut, nature, page, limit, search, userId, prixMin, prixMax, latitude, longitude, distanceMax, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnoncesApi.listAnnonces']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mettre à jour une annonce
         * @param {string} id 
         * @param {AnnonceUpdate} annonceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAnnonce(id: string, annonceUpdate: AnnonceUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Annonce>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAnnonce(id, annonceUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnnoncesApi.putAnnonce']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnnoncesApi - factory interface
 * @export
 */
export const AnnoncesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnoncesApiFp(configuration)
    return {
        /**
         * Création d\'une annonce
         * @summary Créer une nouvelle annonce
         * @param {AnnonceCreate} annonceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnnonce(annonceCreate: AnnonceCreate, options?: RawAxiosRequestConfig): AxiosPromise<Annonce> {
            return localVarFp.createAnnonce(annonceCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Supprimer une annonce
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnnonce(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAnnonce(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Récupérer une annonce par son ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnnonce(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Annonce> {
            return localVarFp.getAnnonce(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Liste paginée des annonces avec filtres et tri possibles
         * @summary Récupérer toutes les annonces
         * @param {AnnonceType} [type] Type d\&#39;annonce
         * @param {AnnonceStatut} [statut] Statut de l\&#39;annonce
         * @param {AnnonceNature} [nature] Nature de l\&#39;annonce
         * @param {number} [page] Numéro de page
         * @param {number} [limit] Nombre d\&#39;éléments par page
         * @param {string} [search] Recherche textuelle dans titre et description
         * @param {string} [userId] Recherche par utilisateur
         * @param {number} [prixMin] Prix minimum
         * @param {number} [prixMax] Prix maximum
         * @param {number} [latitude] Latitude pour le tri par distance
         * @param {number} [longitude] Longitude pour le tri par distance
         * @param {number} [distanceMax] Distance maximale en kilomètres (nécessite lat/lon)
         * @param {ListAnnoncesSortByEnum} [sortBy] Champ de tri
         * @param {ListAnnoncesSortOrderEnum} [sortOrder] Ordre de tri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnnonces(type?: AnnonceType, statut?: AnnonceStatut, nature?: AnnonceNature, page?: number, limit?: number, search?: string, userId?: string, prixMin?: number, prixMax?: number, latitude?: number, longitude?: number, distanceMax?: number, sortBy?: ListAnnoncesSortByEnum, sortOrder?: ListAnnoncesSortOrderEnum, options?: RawAxiosRequestConfig): AxiosPromise<Annonces> {
            return localVarFp.listAnnonces(type, statut, nature, page, limit, search, userId, prixMin, prixMax, latitude, longitude, distanceMax, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mettre à jour une annonce
         * @param {string} id 
         * @param {AnnonceUpdate} annonceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAnnonce(id: string, annonceUpdate: AnnonceUpdate, options?: RawAxiosRequestConfig): AxiosPromise<Annonce> {
            return localVarFp.putAnnonce(id, annonceUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnoncesApi - object-oriented interface
 * @export
 * @class AnnoncesApi
 * @extends {BaseAPI}
 */
export class AnnoncesApi extends BaseAPI {
    /**
     * Création d\'une annonce
     * @summary Créer une nouvelle annonce
     * @param {AnnonceCreate} annonceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnoncesApi
     */
    public createAnnonce(annonceCreate: AnnonceCreate, options?: RawAxiosRequestConfig) {
        return AnnoncesApiFp(this.configuration).createAnnonce(annonceCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Supprimer une annonce
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnoncesApi
     */
    public deleteAnnonce(id: string, options?: RawAxiosRequestConfig) {
        return AnnoncesApiFp(this.configuration).deleteAnnonce(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Récupérer une annonce par son ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnoncesApi
     */
    public getAnnonce(id: string, options?: RawAxiosRequestConfig) {
        return AnnoncesApiFp(this.configuration).getAnnonce(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Liste paginée des annonces avec filtres et tri possibles
     * @summary Récupérer toutes les annonces
     * @param {AnnonceType} [type] Type d\&#39;annonce
     * @param {AnnonceStatut} [statut] Statut de l\&#39;annonce
     * @param {AnnonceNature} [nature] Nature de l\&#39;annonce
     * @param {number} [page] Numéro de page
     * @param {number} [limit] Nombre d\&#39;éléments par page
     * @param {string} [search] Recherche textuelle dans titre et description
     * @param {string} [userId] Recherche par utilisateur
     * @param {number} [prixMin] Prix minimum
     * @param {number} [prixMax] Prix maximum
     * @param {number} [latitude] Latitude pour le tri par distance
     * @param {number} [longitude] Longitude pour le tri par distance
     * @param {number} [distanceMax] Distance maximale en kilomètres (nécessite lat/lon)
     * @param {ListAnnoncesSortByEnum} [sortBy] Champ de tri
     * @param {ListAnnoncesSortOrderEnum} [sortOrder] Ordre de tri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnoncesApi
     */
    public listAnnonces(type?: AnnonceType, statut?: AnnonceStatut, nature?: AnnonceNature, page?: number, limit?: number, search?: string, userId?: string, prixMin?: number, prixMax?: number, latitude?: number, longitude?: number, distanceMax?: number, sortBy?: ListAnnoncesSortByEnum, sortOrder?: ListAnnoncesSortOrderEnum, options?: RawAxiosRequestConfig) {
        return AnnoncesApiFp(this.configuration).listAnnonces(type, statut, nature, page, limit, search, userId, prixMin, prixMax, latitude, longitude, distanceMax, sortBy, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mettre à jour une annonce
     * @param {string} id 
     * @param {AnnonceUpdate} annonceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnoncesApi
     */
    public putAnnonce(id: string, annonceUpdate: AnnonceUpdate, options?: RawAxiosRequestConfig) {
        return AnnoncesApiFp(this.configuration).putAnnonce(id, annonceUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum ListAnnoncesSortByEnum {
    DateCreation = 'date_creation',
    DateModification = 'date_modification',
    Prix = 'prix',
    Titre = 'titre',
    Distance = 'distance'
}
/**
  * @export
  * @enum {string}
  */
export enum ListAnnoncesSortOrderEnum {
    Asc = 'asc',
    Desc = 'desc'
}


/**
 * AuthentificationApi - axios parameter creator
 * @export
 */
export const AuthentificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Échanger le code OAuth pour un token
         * @param {OAuthTokenRequest} oAuthTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeOAuthToken: async (oAuthTokenRequest: OAuthTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oAuthTokenRequest' is not null or undefined
            assertParamExists('exchangeOAuthToken', 'oAuthTokenRequest', oAuthTokenRequest)
            const localVarPath = `/api/v1/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthentificationApi - functional programming interface
 * @export
 */
export const AuthentificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthentificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Échanger le code OAuth pour un token
         * @param {OAuthTokenRequest} oAuthTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeOAuthToken(oAuthTokenRequest: OAuthTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeOAuthToken(oAuthTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthentificationApi.exchangeOAuthToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthentificationApi - factory interface
 * @export
 */
export const AuthentificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthentificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Échanger le code OAuth pour un token
         * @param {OAuthTokenRequest} oAuthTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeOAuthToken(oAuthTokenRequest: OAuthTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<OAuthTokenResponse> {
            return localVarFp.exchangeOAuthToken(oAuthTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthentificationApi - object-oriented interface
 * @export
 * @class AuthentificationApi
 * @extends {BaseAPI}
 */
export class AuthentificationApi extends BaseAPI {
    /**
     * 
     * @summary Échanger le code OAuth pour un token
     * @param {OAuthTokenRequest} oAuthTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthentificationApi
     */
    public exchangeOAuthToken(oAuthTokenRequest: OAuthTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthentificationApiFp(this.configuration).exchangeOAuthToken(oAuthTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhotosApi - axios parameter creator
 * @export
 */
export const PhotosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ajouter une photo
         * @param {File} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoto: async (body: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPhoto', 'body', body)
            const localVarPath = `/api/v1/annonces/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Supprimer une photo
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhoto: async (photoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            assertParamExists('deletePhoto', 'photoId', photoId)
            const localVarPath = `/api/v1/annonces/photos/{photoId}`
                .replace(`{${"photoId"}}`, encodeURIComponent(String(photoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Récupérer le contenu d\'une photo en taille réelle
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoFull: async (photoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            assertParamExists('getPhotoFull', 'photoId', photoId)
            const localVarPath = `/api/v1/photos/{photoId}/full`
                .replace(`{${"photoId"}}`, encodeURIComponent(String(photoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Récupérer le contenu d\'une photo en miniature
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoThumb: async (photoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            assertParamExists('getPhotoThumb', 'photoId', photoId)
            const localVarPath = `/api/v1/photos/{photoId}/thumb`
                .replace(`{${"photoId"}}`, encodeURIComponent(String(photoId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotosApi - functional programming interface
 * @export
 */
export const PhotosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ajouter une photo
         * @param {File} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPhoto(body: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPhoto(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotosApi.createPhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Supprimer une photo
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePhoto(photoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePhoto(photoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotosApi.deletePhoto']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Récupérer le contenu d\'une photo en taille réelle
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhotoFull(photoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhotoFull(photoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotosApi.getPhotoFull']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Récupérer le contenu d\'une photo en miniature
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPhotoThumb(photoId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPhotoThumb(photoId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotosApi.getPhotoThumb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhotosApi - factory interface
 * @export
 */
export const PhotosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotosApiFp(configuration)
    return {
        /**
         * 
         * @summary Ajouter une photo
         * @param {File} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPhoto(body: File, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createPhoto(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Supprimer une photo
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePhoto(photoId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePhoto(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Récupérer le contenu d\'une photo en taille réelle
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoFull(photoId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getPhotoFull(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Récupérer le contenu d\'une photo en miniature
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPhotoThumb(photoId: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getPhotoThumb(photoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhotosApi - object-oriented interface
 * @export
 * @class PhotosApi
 * @extends {BaseAPI}
 */
export class PhotosApi extends BaseAPI {
    /**
     * 
     * @summary Ajouter une photo
     * @param {File} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApi
     */
    public createPhoto(body: File, options?: RawAxiosRequestConfig) {
        return PhotosApiFp(this.configuration).createPhoto(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Supprimer une photo
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApi
     */
    public deletePhoto(photoId: string, options?: RawAxiosRequestConfig) {
        return PhotosApiFp(this.configuration).deletePhoto(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Récupérer le contenu d\'une photo en taille réelle
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApi
     */
    public getPhotoFull(photoId: string, options?: RawAxiosRequestConfig) {
        return PhotosApiFp(this.configuration).getPhotoFull(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Récupérer le contenu d\'une photo en miniature
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApi
     */
    public getPhotoThumb(photoId: string, options?: RawAxiosRequestConfig) {
        return PhotosApiFp(this.configuration).getPhotoThumb(photoId, options).then((request) => request(this.axios, this.basePath));
    }
}



